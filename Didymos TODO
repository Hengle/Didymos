FixedUpdate where appropriate
Recast, keep layers in mind to reduce raycasts (https://unity3d.com/learn/tutorials/topics/physics/physics-best-practices)
Use producer-consumer pattern with coroutines when appropriate
Watch out when the laying height is negative! Make sure center bottom is above ground!!!
Group obstacles by region
/********
URGENT: Building upon raycast the physics engine is no longer feasible. Instead, for
frequently used physics operations, use the style of “raycasting” in the Java prototype of this game. Calculate map nodes on the go, caching them in a LRU 
Point->Mapnode cache. Use those map nodes for sight, cover disparity, bullets. 
Keep using incrementalraycast to find visual and physical heights
The advantage? I can now MULTITHREAD it since instead of relying on Unity API Raycast, it’s just a bunch of float/int calculations. Use the job system for this. When multithreading, quit the thread early if a map node is not found and has to be calculated using Unity API.
To prevent the very start of the game from being laggy, calculate the starting area’s map nodes
In this case, each GameObject representing an obstacle should have an “opacity”, since the entire map will be divvied into cubes each of which will “dilute” the virtual raycast’s strength. The Unity API raycast should find every single obstacle’s height and the virtual raycast algorithm should take each of these obstacle’s height into account
*********/

When stopping a coroutine that uses pooled objects at one point, keep track of which objects it has used up to that point. Pass in a list of pool able objects, and add stuff to that list each time. Upon premature or successful shutdown of coroutine, empty that list of pooled objects
//////////////////////////////////

Have a special case for pathfinder. When the algorithm reaches an area of nodes where the enemy will be completely hidden, or have non-negligible disparity, switch the heap sorting algorithm to now include strategy cost, hcost, and gcost. Use strategy pattern where the strategy will be injected into PathfindingHeap and the heap resorted



Group up humanoid’s fields into serializable classes

Put pathfinding strategies into one class and have it serializable and Humanoid’s field

Map node should be calculated using a box the size of a node capturing anything that intersects with it. 

DestinationStrategy is now a thing

limit pathfinding to a box. Getneighbours can only return stuff inside the box. Make the box wide to accommodate tricky paths

Spread flanking pathfinding and disparity checks across multiple frames

make some classes structs in pathfinder

pathfinder computes a “grid” of additional costs and caches it. Multiple pathfinding
will reuse those results. One cache of cover disparities, and one of movement costs

clean up pathfinder

use asynchronous coroutines to spread heavy calculations across frames

optimize pathfinder full of pooling

Replace stress system with enum types, each representing a type of stress. Examples include HeavyFire, LightFire, Postgrenade, InsideSmokescreen. AI behavior depends on which stressors are present. Some logic will be used to “upgrade” stressors that are upgrades of one another (LightFire -> HeavyFire)

Object Pool needs to be working (Search “Unity editor crashes generics”
Heap needs pools!

Cover disparity stress only when AI checks periodically, or during special behavior routines. 

Have a weapon list of GameObject -> Script -> Serializable Weapon. Instantiate each weapon at runtime using Instantiate. Make sure to release the weapon

MAKE THAT MODEL

balance pathfinding and make sure that flanking strategy makes sense